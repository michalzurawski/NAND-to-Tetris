/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    static int NUMBER_OF_BITS;

    /** Initializes the library. */
    function void init() {
        var int i, tmp;
        let NUMBER_OF_BITS = 16;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        while (i < NUMBER_OF_BITS) {
            let tmp = twoToThe[i - 1];
            let twoToThe[i] = tmp + tmp;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, i, shiftedX;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while (i < NUMBER_OF_BITS) {
            if (y & twoToThe[i]) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean neg;
        var int result, i, tmp;
        if (x < 0) {
            let neg = true;
            let x = -x;
        } else {
            let neg = false;
        }
        if (y < 0) {
            let neg = ~neg;
            let y = -y;
        }
        let tmp = 0;
        let result = 0;
        let i = 15;
        while (~(i < 0)) {
            let tmp = tmp + tmp;
            if (x & twoToThe[i]) {
                let tmp = tmp + 1;
            }
            let result = result + result;
            if (~(tmp < y)) {
                let result = result + 1;
                let tmp = tmp - y;
            }
            let i = i - 1;
        }
        if (neg) {
            let result = -result;
        }
        return result;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, tmp, tmp2;
        let y = 0;
        let i = 7; // NUMBER_OF_BITS / 2 - 1
        while (i > -1) {
            let tmp = y + twoToThe[i];
            let tmp2 = tmp * tmp;
            if (~(tmp2 > x) & (tmp2 > 0)) {
                let y = tmp;
            }
            let i = i - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
