/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static Array screen;
    static Array twoToThe; // twoToThe[i] = 2^i
    static Array fill; // fill[i] = 2^i - 1, i > 0
    static Array revFill; // revFill[i] = ~fill[i]
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        var int i, tmp;
        let screen = 16384;
        let color = true;
        let twoToThe = Array.new(16);
        let fill = Array.new(16);
        let revFill = Array.new(16);
        let twoToThe[0] = 1;
        let fill[0] = 0;
        let revFill[0] = -1;
        let i = 1;
        while (i < 16) {
            let tmp = twoToThe[i - 1];
            let twoToThe[i] = tmp + tmp;
            let tmp = fill[i - 1];
            let fill[i] = tmp + tmp + 1;
            let revFill[i] = ~fill[i];
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 8192;
        while (~(i < 0)) {
            let screen[i] = 0;
            let i = i - 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false.
     */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, mask;
        let address = (x / 16) + (y * 32);
        let mask = twoToThe[x & 15];
        if (color) {
            let screen[address] = screen[address] | mask;
        } else {
            let screen[address] = screen[address] & (~mask);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int address, mask, tmp, dx, dy, a, b, diff;
        if (y1 = y2) {
            if (x1 > x2) {
                let tmp = x1;
                let x1 = x2;
                let x2 = tmp;
            }
            if (x1 + 16 > x2) {
                while (~(x1 > x2)) {
                    do Screen.drawPixel(x1, y1);
                    let x1 = x1 + 1;
                }
                return;
            }
            let address = (y1 * 32) + (x1 / 16);
            if (color) {
                let tmp = x1 & 15;
                if (~(tmp = 0)) {
                    let screen[address] = screen[address] | revFill[tmp];
                    let x1 = x1 + 16 - tmp;
                    let address = address + 1;
                }
                while (~(x1 + 16 > x2)) {
                    let screen[address] = -1;
                    let x1 = x1 + 16;
                    let address = address + 1;
                }
                let tmp = x2 & 15;
                if (tmp = 15) {
                    let screen[address] = -1;
                } else {
                    if (~(tmp = 0)) {
                        let screen[address] = screen[address] | fill[tmp+1];
                    }
                }
            } else {
                let tmp = x1 & 15;
                if (~(tmp = 0)) {
                    let screen[address] = screen[address] & fill[tmp];
                    let x1 = x1 + 16 - tmp;
                    let address = address + 1;
                }
                while (~(x1 + 16 > x2)) {
                    let screen[address] = 0;
                    let x1 = x1 + 16;
                    let address = address + 1;
                }
                let tmp = x2 & 15;
                if (tmp = 15) {
                    let screen[address] = 0;
                } else {
                    let screen[address] = screen[address] & revFill[tmp+1];
                }
            }
        } else {
            if (x1 = x2) {
                if (y1 > y2) {
                    let tmp = y1;
                    let y1 = y2;
                    let y2 = tmp;
                }
                while (~(y1 > y2)) {
                    do Screen.drawPixel(x1, y1);
                    let y1 = y1 + 1;
                }
            } else {
                let dx = x2 - x1;
                let dy = y2 - y1;
                let a = 0;
                let b = 0;
                let diff = 0;
                if (dy < 0) {
                    if (dx < 0) {
                        while (~((a < dx) | (b < dy))) { // (a>=dx) & (b>=dy)
                            do Screen.drawPixel(x1 + a, y1 + b);
                            if (diff < 0) {
                                let a = a - 1;
                                let diff = diff - dy;
                            } else {
                                let b = b - 1;
                                let diff = diff + dx;
                            }
                        }
                    } else {
                        while (~((a > dx) | (b < dy))) { // (a<=dx) & (b>=dy)
                            do Screen.drawPixel(x1 + a, y1 + b);
                            if (diff < 0) {
                                let a = a + 1;
                                let diff = diff - dy;
                            } else {
                                let b = b - 1;
                                let diff = diff - dx;
                            }
                        }
                    }
                } else {
                    if (dx < 0) {
                        while (~((a < dx) | (b > dy))) { // (a>=dx) & (b<=dy)
                            do Screen.drawPixel(x1 + a, y1 + b);
                            if (diff < 0) {
                                let a = a - 1;
                                let diff = diff + dy;
                            } else {
                                let b = b + 1;
                                let diff = diff + dx;
                            }
                        }
                    } else {
                        while (~((a > dx) | (b > dy))) { // (a<=dx) & (b<=dy)
                            do Screen.drawPixel(x1 + a, y1 + b);
                            if (diff < 0) {
                                let a = a + 1;
                                let diff = diff + dy;
                            } else {
                                let b = b + 1;
                                let diff = diff - dx;
                            }
                        }
                    }
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color.
     */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        while (~(y1 > y2)) {
            do Screen.drawLine(x1, y1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color.
     */
    function void drawCircle(int x, int y, int r) {
        var int i, tmp, tmp2, r2;
        let i = -r;
        let r2 = r * r;
        while (~(i > r)) {
            let tmp = Math.sqrt(r2 - (i*i));
            let tmp2 = y+i;
            do Screen.drawLine(x - tmp, tmp2, x + tmp, tmp2);
            let i = i + 1;
        }
        return;
    }
}
