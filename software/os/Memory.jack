/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array ram;
    static Array heap;
    static int heapBase;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heapBase = 2048;
        let heap = heapBase;
        let heap[0] = 0;
        let heap[1] = 14333; // 16384 - 2048 - 1 - 2; heapSize - 2
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address.
     */
    function int alloc(int size) {
        var int address, newSize, nextFree, previous;
        let nextFree = heap;
        let previous = heap;
        while (nextFree[1] < size) { // First fit
            if (nextFree[0] = 0) {   // Not enough memory on the heap
                do Sys.error(1);    // TODO defragment
            }
            let previous = nextFree;
            let nextFree = nextFree[0];
        }
        let newSize = nextFree[1] - size - 2;
        if (newSize < 1) {
            let previous[0] = nextFree[0];
            let address = nextFree;
        } else {
            let nextFree[1] = newSize;
            let address = nextFree + newSize + 1;
            let ram[address + 1] = size;
        }
        return address + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations.
     */
    function void deAlloc(Array object) {
        var int nextFree;
        let nextFree = heap;
        while (~(nextFree[0] = 0)) {
            let nextFree = nextFree[0];
        }
        let nextFree[0] = object - 2;
        let object[-2] = 0;
        return;
    }

    /** Sets the first num bytes of the object to the specified value. */
    function void memset(Array object, int value, int num) {
        var int i;
        let i = 0;
        while (i < num) {
            let object[i] = num;
            let i = i + 1;
        }
        return;
    }
}
