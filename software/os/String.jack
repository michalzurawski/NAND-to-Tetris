/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field Array characters;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0.
     */
    constructor String new(int maxLength) {
        let characters = Array.new(maxLength + 1);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do characters.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return characters[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let characters[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let characters[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected.
     */
    method int intValue() {
        var int value, i;
        var boolean minus;
        let minus = false;
        let value = 0;
        let i = 0;
        if ((0 < length) & (characters[0] = 45)) {
            let minus = true;
            let i = 1;
        }
        while ((i < length) & (characters[i] > 47) & (characters[i] < 58)) {
            let value = 10 * value + characters[i] - 48;
            let i = i + 1;
        }
        if (minus) {
            let value = -value;
        }
        return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit, i, withoutLastDigit;
        var Array temp;
        let temp = Array.new(16);
        //do Memory.memset(temp, 0, 16);
        let temp[15] = 48;
        let i = 15;
        let length = 0;
        if (val < 0) {
            let characters[0] = 45;
            let length = 1;
            let val = -val;
        }
        while (~(val = 0)) {
            let withoutLastDigit = val / 10;
            let lastDigit = val - (withoutLastDigit * 10);
            let temp[i] = lastDigit + 48;
            let val  = withoutLastDigit;
            let i = i - 1;
        }
        let i = i + 1;
        while (i < 16) {
            let characters[length] = temp[i];
            let i = i + 1;
            let length = length + 1;
        }
        do temp.dispose();
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
