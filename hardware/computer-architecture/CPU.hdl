// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[15], b=instruction[3], out=writeM);
    Not(in=instruction[15], out=ainstr);
    Not(in=instruction[12], out=loada0);
    And(a=instruction[15], b=instruction[5], out=loada1);
    Or(a=ainstr, b=loada1, out=loada);
    Mux16(a=aluout, b=instruction, sel=ainstr, out=nextinst);
    ARegister(in=nextinst, load=loada, out=registerA, out[0..14]=addressM);
    And(a=instruction[12], b=instruction[15], out=i12and15);
    Mux16(a=registerA, b=inM, sel=i12and15, out=aluy);
    And(a=instruction[15], b=instruction[4], out=i4and15);
    DRegister(in=aluout, load=i4and15, out=alux); 
    And(a=instruction[15], b=instruction[11], out=zx);
    And(a=instruction[15], b=instruction[10], out=nx);
    And(a=instruction[15], b=instruction[9], out=zy);
    And(a=instruction[15], b=instruction[8], out=ny);
    And(a=instruction[15], b=instruction[7], out=f);
    And(a=instruction[15], b=instruction[6], out=no);
    ALU(x=alux, y=aluy, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=outM, out=aluout, ng=ng, zr=zr);
    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=instruction[0], b=notng, out=and1);
    And(a=and1, b=notzr, out=and11);
    And(a=instruction[1], b=zr, out=and2);
    And(a=instruction[2], b=ng, out=and3);
    Or8Way(in[0]=and11, in[1]=and2, in[2]=and3, in[3..7]=false, out=jmp);
    And(a=instruction[15], b=jmp, out=pcload);
    PC(in=aluy, reset=reset, load=pcload, inc=true, out[0..14]=pc);
}
